.PHONY: help dev prod-build prod-up prod-down prod-restart prod-logs prod-status prod-clean prod-deploy

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN  := \033[0;32m
YELLOW := \033[1;33m
BLUE   := \033[0;34m
NC     := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
	@echo "$(BLUE)üöÄ WDH - Website Down Handler$(NC)"
	@echo ""
	@echo "$(GREEN)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	docker compose up -d
	@echo "$(GREEN)‚úì –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"
	@echo "Frontend: http://localhost:5173"
	@echo "Backend: http://localhost:3000"

prod-build: ## –°–æ–±—Ä–∞—Ç—å production –æ–±—Ä–∞–∑—ã
	@echo "$(GREEN)üèóÔ∏è  –°–±–æ—Ä–∫–∞ production –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker compose -f docker-compose.prod.yml build --no-cache

prod-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ production —Ä–µ–∂–∏–º–µ
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ...$(NC)"
	docker compose -f docker-compose.prod.yml --env-file .env.production up -d
	@echo "$(GREEN)‚úì –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"
	@make prod-status

prod-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(YELLOW)‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	docker compose -f docker-compose.prod.yml down
	@echo "$(GREEN)‚úì –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

prod-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	docker compose -f docker-compose.prod.yml restart
	@echo "$(GREEN)‚úì –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

prod-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f docker-compose.prod.yml logs -f

prod-status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo ""
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	@docker compose -f docker-compose.prod.yml ps
	@echo ""
	@echo "$(BLUE)üè• Health checks:$(NC)"
	@docker compose -f docker-compose.prod.yml ps --filter health=healthy || true
	@echo ""

prod-clean: ## –£–¥–∞–ª–∏—Ç—å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volumes
	@echo "$(YELLOW)‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ volumes...$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã! (y/n) " -n 1 -r; \
	echo ""; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker compose -f docker-compose.prod.yml down -v; \
		echo "$(GREEN)‚úì –£–¥–∞–ª–µ–Ω–æ$(NC)"; \
	else \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

prod-deploy: ## –ü–æ–ª–Ω—ã–π production deploy (build + up)
	@./deploy-prod.sh

check-env: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª .env.production
	@if [ -f .env.production ]; then \
		echo "$(GREEN)‚úì .env.production –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo ""; \
		echo "$(BLUE)–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤):$(NC)"; \
		cat .env.production | grep -v "PASSWORD\|SECRET\|TOKEN" || true; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "$(BLUE)–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞:$(NC)"; \
		echo "  cp .env.production.example .env.production"; \
	fi

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health endpoints
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints...$(NC)"
	@echo ""
	@echo -n "Backend: "
	@curl -sf http://localhost:3000/api/health && echo "$(GREEN)‚úì$(NC)" || echo "$(YELLOW)‚úó$(NC)"
	@echo -n "Frontend: "
	@curl -sf http://localhost/health && echo "$(GREEN)‚úì$(NC)" || echo "$(YELLOW)‚úó$(NC)"
	@echo ""

update: prod-down ## –û–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å production
	@echo "$(BLUE)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	git pull
	@make prod-build
	@make prod-up
	@echo "$(GREEN)‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

backup-db: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î...$(NC)"
	@mkdir -p backups
	docker compose -f docker-compose.prod.yml exec -T postgres pg_dump -U wdh_user wdh_db > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úì –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

restore-db: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: make restore-db FILE=backup.sql)
	@if [ -z "$(FILE)" ]; then \
		echo "$(YELLOW)–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: make restore-db FILE=backups/backup.sql$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ $(FILE)...$(NC)"
	docker compose -f docker-compose.prod.yml exec -T postgres psql -U wdh_user -d wdh_db < $(FILE)
	@echo "$(GREEN)‚úì –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"

clean-logs: ## –û—á–∏—Å—Ç–∏—Ç—å Docker –ª–æ–≥–∏
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ Docker –ª–æ–≥–æ–≤...$(NC)"
	docker compose -f docker-compose.prod.yml exec -T backend truncate -s 0 /proc/1/fd/1 2>/dev/null || true
	@echo "$(GREEN)‚úì –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã$(NC)"

