import TelegramBot from 'node-telegram-bot-api';
import config from '../config';
import { CheckStatus, DomainStatus } from '@prisma/client';
import prisma from '../config/database';

class TelegramService {
  private bot: TelegramBot | null = null;

  constructor() {
    if (config.telegram.botToken) {
      this.bot = new TelegramBot(config.telegram.botToken, { polling: false });
      console.log('‚úì Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.warn('‚ö†Ô∏è Telegram Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }
  }

  async sendMessage(chatId: string, message: string): Promise<void> {
    if (!this.bot) {
      const error = 'Telegram Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
      console.warn(error);
      throw new Error(error);
    }

    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. Chat ID: ${chatId}`);
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      console.log('‚úì –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
      throw error;
    }
  }

  async sendAlert(
    website: any,
    status: CheckStatus,
    type: 'down' | 'up'
  ): Promise<void> {
    if (!website.user.telegramChatId) {
      return;
    }

    const emoji = type === 'down' ? 'üî¥' : 'üü¢';
    const statusText = type === 'down' ? '–ù–ï–î–û–°–¢–£–ü–ï–ù' : '–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù';

    const message = `
${emoji} <b>${statusText}</b>

<b>–°–∞–π—Ç:</b> ${website.name}
<b>URL:</b> ${website.url}
<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
<b>–°—Ç–∞—Ç—É—Å:</b> ${status}
    `.trim();

    await this.sendMessage(website.user.telegramChatId, message);
  }

  async sendDailySummary(userId: string): Promise<void> {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        websites: {
          include: {
            statusChecks: {
              orderBy: { checkedAt: 'desc' },
              take: 1,
            },
          },
        },
      },
    });

    if (!user || !user.telegramChatId || !user.notificationsEnabled) {
      return;
    }

    const totalWebsites = user.websites.length;
    const onlineWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.ONLINE
    ).length;
    const offlineWebsites = user.websites.filter(
      (w) =>
        w.statusChecks[0]?.status === CheckStatus.OFFLINE ||
        w.statusChecks[0]?.status === CheckStatus.ERROR
    ).length;

    const message = `
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

<b>–í—Å–µ–≥–æ —Å–∞–π—Ç–æ–≤:</b> ${totalWebsites}
üü¢ <b>–û–Ω–ª–∞–π–Ω:</b> ${onlineWebsites}
üî¥ <b>–û—Ñ–ª–∞–π–Ω:</b> ${offlineWebsites}

<b>–î–∞—Ç–∞:</b> ${new Date().toLocaleDateString('ru-RU')}
    `.trim();

    await this.sendMessage(user.telegramChatId, message);
  }

  async sendStatusReport(userId: string): Promise<void> {
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        websites: {
          include: {
            statusChecks: {
              orderBy: { checkedAt: 'desc' },
              take: 1,
            },
          },
        },
      },
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!user.telegramChatId) {
      throw new Error('Telegram Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
    }

    console.log(`‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. Chat ID: ${user.telegramChatId}, –°–∞–π—Ç–æ–≤: ${user.websites.length}`);

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalWebsites = user.websites.length;
    const onlineWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.ONLINE
    ).length;
    const offlineWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.OFFLINE
    ).length;
    const errorWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.ERROR
    ).length;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    let summaryMessage = `üìä <b>–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤</b>\n\n`;
    summaryMessage += `<b>–í—Å–µ–≥–æ:</b> ${totalWebsites}\n`;
    summaryMessage += `üü¢ <b>–û–Ω–ª–∞–π–Ω:</b> ${onlineWebsites}\n`;
    summaryMessage += `üî¥ <b>–û—Ñ–ª–∞–π–Ω:</b> ${offlineWebsites}\n`;
    summaryMessage += `üü† <b>–û—à–∏–±–∫–∏:</b> ${errorWebsites}\n\n`;
    summaryMessage += `<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</i>`;

    await this.sendMessage(user.telegramChatId, summaryMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∞–π—Ç—ã (–æ—Ñ—Ñ–ª–∞–π–Ω –∏ –æ—à–∏–±–∫–∏)
    const problemWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status !== CheckStatus.ONLINE
    );

    if (problemWebsites.length > 0) {
      const MAX_MESSAGE_LENGTH = 4000; // –õ–∏–º–∏—Ç Telegram - 4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
      let detailMessage = '‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∞–π—Ç—ã:</b>\n\n';
      let messageCount = 1;

      for (const website of problemWebsites) {
        const lastCheck = website.statusChecks[0];
        const emoji =
          lastCheck?.status === CheckStatus.OFFLINE ? 'üî¥' : 'üü†';

        let websiteInfo = `${emoji} <b>${website.name}</b>\n`;
        websiteInfo += `   ${website.url}\n`;
        if (lastCheck) {
          websiteInfo += `   –°—Ç–∞—Ç—É—Å: ${lastCheck.status}`;
          if (lastCheck.responseTime) {
            websiteInfo += ` (${lastCheck.responseTime}ms)`;
          }
          websiteInfo += '\n';
        }
        websiteInfo += '\n';

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        if ((detailMessage + websiteInfo).length > MAX_MESSAGE_LENGTH) {
          await this.sendMessage(user.telegramChatId, detailMessage);
          messageCount++;
          detailMessage = `‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∞–π—Ç—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ${messageCount}):</b>\n\n`;
        }

        detailMessage += websiteInfo;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (detailMessage.length > 0) {
        await this.sendMessage(user.telegramChatId, detailMessage);
      }
    }
  }

  async sendDomainAlert(
    domain: any,
    status: DomainStatus,
    daysLeft: number | null,
    expiresAt: Date | null
  ): Promise<void> {
    if (!domain.user.telegramChatId) {
      return;
    }

    let emoji = 'üåê';
    let statusText = '';

    if (status === DomainStatus.EXPIRED) {
      emoji = 'üî¥';
      statusText = '–ò–°–¢–ï–ö';
    } else if (status === DomainStatus.EXPIRING_SOON) {
      emoji = '‚ö†Ô∏è';
      statusText = '–ò–°–¢–ï–ö–ê–ï–¢ –°–ö–û–†–û';
    } else if (status === DomainStatus.ACTIVE) {
      emoji = 'üü¢';
      statusText = '–ê–ö–¢–ò–í–ï–ù';
    } else {
      emoji = 'üü†';
      statusText = '–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò';
    }

    let message = `
${emoji} <b>${statusText}</b>

<b>–î–æ–º–µ–Ω:</b> ${domain.name}
<b>–ê–¥—Ä–µ—Å:</b> ${domain.domain}
<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `.trim();

    if (daysLeft !== null) {
      message += `\n<b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> ${daysLeft}`;
    }

    if (expiresAt) {
      message += `\n<b>–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> ${expiresAt.toLocaleDateString('ru-RU')}`;
    }

    await this.sendMessage(domain.user.telegramChatId, message);
  }
}

export const telegramService = new TelegramService();
