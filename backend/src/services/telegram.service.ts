import TelegramBot from 'node-telegram-bot-api';
import config from '../config';
import { CheckStatus, DomainStatus } from '@prisma/client';
import prisma from '../config/database';

class TelegramService {
  private bot: TelegramBot | null = null;

  constructor() {
    if (config.telegram.botToken) {
      this.bot = new TelegramBot(config.telegram.botToken, { polling: true });
      this.setupCommandHandlers();
      console.log('‚úì Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.warn('‚ö†Ô∏è Telegram Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  private setupCommandHandlers(): void {
    if (!this.bot) return;

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id.toString();
      const message = `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WDH Monitoring Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö —Å–∞–π—Ç–æ–≤ –∏ –¥–æ–º–µ–Ω–æ–≤.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/report - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (—Å–∞–π—Ç—ã + –¥–æ–º–µ–Ω—ã)
/websites - –û—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç–∞–º
/domains - –û—Ç—á–µ—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º
/help - –°–ø—Ä–∞–≤–∫–∞

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à Chat ID: <code>${chatId}</code>
2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ
3. –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–æ–≤
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–æ–≤
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 09:00 MSK
      `.trim();

      await this.sendMessage(chatId, message);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id.toString();
      const message = `
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>/report</b> - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º –∏ –¥–æ–º–µ–Ω–∞–º
<b>/websites</b> - –û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å–∞–π—Ç–∞–º
<b>/domains</b> - –û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ–º–µ–Ω–∞–º
<b>/help</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–í–∞—à Chat ID:</b> <code>${chatId}</code>

üí° –í—Å—Ç–∞–≤—å—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
      `.trim();

      await this.sendMessage(chatId, message);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    this.bot.onText(/\/report/, async (msg) => {
      const chatId = msg.chat.id.toString();
      
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId
        const user = await prisma.user.findFirst({
          where: { telegramChatId: chatId },
        });

        if (!user) {
          await this.sendMessage(
            chatId,
            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n<b>–í–∞—à Chat ID:</b> <code>' + chatId + '</code>'
          );
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã
        await this.sendMessage(chatId, '‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç—ã...');
        
        await this.sendStatusReport(user.id);
        await this.sendDomainReport(user.id);

        console.log(`‚úì –û—Ç—á–µ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /report –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /report:', error);
        await this.sendMessage(
          chatId,
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\n' + error.message
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /websites - –æ—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç–∞–º
    this.bot.onText(/\/websites/, async (msg) => {
      const chatId = msg.chat.id.toString();
      
      try {
        const user = await prisma.user.findFirst({
          where: { telegramChatId: chatId },
        });

        if (!user) {
          await this.sendMessage(
            chatId,
            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n<b>–í–∞—à Chat ID:</b> <code>' + chatId + '</code>'
          );
          return;
        }

        await this.sendMessage(chatId, '‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç–∞–º...');
        await this.sendStatusReport(user.id);

        console.log(`‚úì –û—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /websites:', error);
        await this.sendMessage(
          chatId,
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\n' + error.message
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /domains - –æ—Ç—á–µ—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º
    this.bot.onText(/\/domains/, async (msg) => {
      const chatId = msg.chat.id.toString();
      
      try {
        const user = await prisma.user.findFirst({
          where: { telegramChatId: chatId },
        });

        if (!user) {
          await this.sendMessage(
            chatId,
            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n<b>–í–∞—à Chat ID:</b> <code>' + chatId + '</code>'
          );
          return;
        }

        await this.sendMessage(chatId, '‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º...');
        await this.sendDomainReport(user.id);

        console.log(`‚úì –û—Ç—á–µ—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /domains:', error);
        await this.sendMessage(
          chatId,
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\n' + error.message
        );
      }
    });

    console.log('‚úì –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  async sendMessage(chatId: string, message: string): Promise<void> {
    if (!this.bot) {
      const error = 'Telegram Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';
      console.warn(error);
      throw new Error(error);
    }

    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. Chat ID: ${chatId}`);
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      console.log('‚úì –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
      throw error;
    }
  }

  async sendAlert(
    website: any,
    status: CheckStatus,
    type: 'down' | 'up'
  ): Promise<void> {
    if (!website.user.telegramChatId) {
      return;
    }

    const emoji = type === 'down' ? 'üî¥' : 'üü¢';
    const statusText = type === 'down' ? '–ù–ï–î–û–°–¢–£–ü–ï–ù' : '–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù';

    let message = `
${emoji} <b>${statusText}</b>

<b>–°–∞–π—Ç:</b> ${website.name}
<b>URL:</b> ${website.url}
<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
<b>–°—Ç–∞—Ç—É—Å:</b> ${status}`;

    // –î–æ–±–∞–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    if (website.ipAddress) {
      message += `\n<b>IP:</b> ${website.ipAddress}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (website.hosting) {
      message += `\n<b>–•–æ—Å—Ç–∏–Ω–≥:</b> ${website.hosting}`;
    }

    message = message.trim();

    await this.sendMessage(website.user.telegramChatId, message);
  }

  async sendDailySummary(userId: string): Promise<void> {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        websites: {
          include: {
            statusChecks: {
              orderBy: { checkedAt: 'desc' },
              take: 1,
            },
          },
        },
      },
    });

    if (!user || !user.telegramChatId || !user.notificationsEnabled) {
      return;
    }

    const totalWebsites = user.websites.length;
    const onlineWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.ONLINE
    ).length;
    const offlineWebsites = user.websites.filter(
      (w) =>
        w.statusChecks[0]?.status === CheckStatus.OFFLINE ||
        w.statusChecks[0]?.status === CheckStatus.ERROR
    ).length;

    const message = `
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

<b>–í—Å–µ–≥–æ —Å–∞–π—Ç–æ–≤:</b> ${totalWebsites}
üü¢ <b>–û–Ω–ª–∞–π–Ω:</b> ${onlineWebsites}
üî¥ <b>–û—Ñ–ª–∞–π–Ω:</b> ${offlineWebsites}

<b>–î–∞—Ç–∞:</b> ${new Date().toLocaleDateString('ru-RU')}
    `.trim();

    await this.sendMessage(user.telegramChatId, message);
  }

  async sendStatusReport(userId: string): Promise<void> {
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        websites: {
          include: {
            statusChecks: {
              orderBy: { checkedAt: 'desc' },
              take: 1,
            },
          },
        },
      },
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!user.telegramChatId) {
      throw new Error('Telegram Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
    }

    console.log(`‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. Chat ID: ${user.telegramChatId}, –°–∞–π—Ç–æ–≤: ${user.websites.length}`);

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalWebsites = user.websites.length;
    const onlineWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.ONLINE
    ).length;
    const offlineWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.OFFLINE
    ).length;
    const errorWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status === CheckStatus.ERROR
    ).length;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    let summaryMessage = `üìä <b>–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤</b>\n\n`;
    summaryMessage += `<b>–í—Å–µ–≥–æ:</b> ${totalWebsites}\n`;
    summaryMessage += `üü¢ <b>–û–Ω–ª–∞–π–Ω:</b> ${onlineWebsites}\n`;
    summaryMessage += `üî¥ <b>–û—Ñ–ª–∞–π–Ω:</b> ${offlineWebsites}\n`;
    summaryMessage += `üü† <b>–û—à–∏–±–∫–∏:</b> ${errorWebsites}\n\n`;
    summaryMessage += `<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</i>`;

    await this.sendMessage(user.telegramChatId, summaryMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∞–π—Ç—ã (–æ—Ñ—Ñ–ª–∞–π–Ω –∏ –æ—à–∏–±–∫–∏)
    const problemWebsites = user.websites.filter(
      (w) => w.statusChecks[0]?.status !== CheckStatus.ONLINE
    );

    if (problemWebsites.length > 0) {
      const MAX_MESSAGE_LENGTH = 4000; // –õ–∏–º–∏—Ç Telegram - 4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
      let detailMessage = '‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∞–π—Ç—ã:</b>\n\n';
      let messageCount = 1;

      for (const website of problemWebsites) {
        const lastCheck = website.statusChecks[0];
        const emoji =
          lastCheck?.status === CheckStatus.OFFLINE ? 'üî¥' : 'üü†';

        let websiteInfo = `${emoji} <b>${website.name}</b>\n`;
        websiteInfo += `   ${website.url}\n`;
        
        if (lastCheck) {
          websiteInfo += `   –°—Ç–∞—Ç—É—Å: ${lastCheck.status}`;
          if (lastCheck.responseTime) {
            websiteInfo += ` (${lastCheck.responseTime}ms)`;
          }
          websiteInfo += '\n';
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
          if (lastCheck.errorMessage) {
            websiteInfo += `   –û—à–∏–±–∫–∞: ${lastCheck.errorMessage}\n`;
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º IP –∏ —Ö–æ—Å—Ç–∏–Ω–≥
        if (website.ipAddress) {
          websiteInfo += `   IP: ${website.ipAddress}\n`;
        }
        if (website.hosting) {
          websiteInfo += `   –•–æ—Å—Ç–∏–Ω–≥: ${website.hosting}\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º SSL –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è HTTPS —Å–∞–π—Ç–æ–≤
        if (website.url.startsWith('https://') && lastCheck) {
          if (lastCheck.sslValid === false) {
            websiteInfo += `   üîí SSL: –û—à–∏–±–∫–∞\n`;
          } else if (lastCheck.sslValid === true && lastCheck.sslDaysLeft !== null) {
            const sslEmoji = lastCheck.sslDaysLeft < 30 ? '‚ö†Ô∏è' : 'üîí';
            websiteInfo += `   ${sslEmoji} SSL: ${lastCheck.sslDaysLeft} –¥–Ω–µ–π\n`;
          }
        }
        
        websiteInfo += '\n';

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        if ((detailMessage + websiteInfo).length > MAX_MESSAGE_LENGTH) {
          await this.sendMessage(user.telegramChatId, detailMessage);
          messageCount++;
          detailMessage = `‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∞–π—Ç—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ${messageCount}):</b>\n\n`;
        }

        detailMessage += websiteInfo;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (detailMessage.length > 0) {
        await this.sendMessage(user.telegramChatId, detailMessage);
      }
    }
  }

  async sendDomainAlert(
    domain: any,
    status: DomainStatus,
    daysLeft: number | null,
    expiresAt: Date | null
  ): Promise<void> {
    if (!domain.user.telegramChatId) {
      return;
    }

    let emoji = 'üåê';
    let statusText = '';

    if (status === DomainStatus.EXPIRED) {
      emoji = 'üî¥';
      statusText = '–ò–°–¢–ï–ö';
    } else if (status === DomainStatus.EXPIRING_SOON) {
      emoji = '‚ö†Ô∏è';
      statusText = '–ò–°–¢–ï–ö–ê–ï–¢ –°–ö–û–†–û';
    } else if (status === DomainStatus.ACTIVE) {
      emoji = 'üü¢';
      statusText = '–ê–ö–¢–ò–í–ï–ù';
    } else {
      emoji = 'üü†';
      statusText = '–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò';
    }

    let message = `
${emoji} <b>${statusText}</b>

<b>–î–æ–º–µ–Ω:</b> ${domain.name}
<b>–ê–¥—Ä–µ—Å:</b> ${domain.domain}
<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `.trim();

    if (daysLeft !== null) {
      message += `\n<b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> ${daysLeft}`;
    }

    if (expiresAt) {
      message += `\n<b>–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> ${expiresAt.toLocaleDateString('ru-RU')}`;
    }

    await this.sendMessage(domain.user.telegramChatId, message);
  }

  async sendDomainReport(userId: string): Promise<void> {
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        domains: {
          include: {
            domainChecks: {
              orderBy: { checkedAt: 'desc' },
              take: 1,
            },
          },
        },
      },
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!user.telegramChatId) {
      throw new Error('Telegram Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
    }

    console.log(`‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. Chat ID: ${user.telegramChatId}, –î–æ–º–µ–Ω–æ–≤: ${user.domains.length}`);

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalDomains = user.domains.length;
    const activeDomains = user.domains.filter(
      (d) => d.domainChecks[0]?.status === DomainStatus.ACTIVE
    ).length;
    const expiringSoonDomains = user.domains.filter(
      (d) => d.domainChecks[0]?.status === DomainStatus.EXPIRING_SOON
    ).length;
    const expiredDomains = user.domains.filter(
      (d) => d.domainChecks[0]?.status === DomainStatus.EXPIRED
    ).length;
    const errorDomains = user.domains.filter(
      (d) => d.domainChecks[0]?.status === DomainStatus.ERROR
    ).length;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    let summaryMessage = `üåê <b>–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤</b>\n\n`;
    summaryMessage += `<b>–í—Å–µ–≥–æ:</b> ${totalDomains}\n`;
    summaryMessage += `üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> ${activeDomains}\n`;
    summaryMessage += `‚ö†Ô∏è <b>–ò—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ:</b> ${expiringSoonDomains}\n`;
    summaryMessage += `üî¥ <b>–ò—Å—Ç–µ–∫–ª–∏:</b> ${expiredDomains}\n`;
    summaryMessage += `üü† <b>–û—à–∏–±–∫–∏:</b> ${errorDomains}\n\n`;
    summaryMessage += `<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</i>`;

    await this.sendMessage(user.telegramChatId, summaryMessage);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–∏—Å—Ç–µ–∫—à–∏–µ, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Å–∫–æ—Ä–æ –∏ —Å –æ—à–∏–±–∫–∞–º–∏)
    const problemDomains = user.domains.filter((d) => {
      const status = d.domainChecks[0]?.status;
      return status === DomainStatus.EXPIRED || 
             status === DomainStatus.EXPIRING_SOON || 
             status === DomainStatus.ERROR;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –¥–æ–º–µ–Ω–∞–º
    if (problemDomains.length > 0) {
      const MAX_MESSAGE_LENGTH = 4000;
      let detailMessage = '‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã:</b>\n\n';
      let messageCount = 1;

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã: —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–µ–∫—à–∏–µ, –ø–æ—Ç–æ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Å–∫–æ—Ä–æ, –ø–æ—Ç–æ–º –æ—à–∏–±–∫–∏
      const sortedDomains = [...problemDomains].sort((a, b) => {
        const aCheck = a.domainChecks[0];
        const bCheck = b.domainChecks[0];
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–µ–∫—à–∏–µ
        if (aCheck?.status === DomainStatus.EXPIRED && bCheck?.status !== DomainStatus.EXPIRED) return -1;
        if (aCheck?.status !== DomainStatus.EXPIRED && bCheck?.status === DomainStatus.EXPIRED) return 1;
        
        // –ü–æ—Ç–æ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Å–∫–æ—Ä–æ
        if (aCheck?.status === DomainStatus.EXPIRING_SOON && bCheck?.status !== DomainStatus.EXPIRING_SOON) return -1;
        if (aCheck?.status !== DomainStatus.EXPIRING_SOON && bCheck?.status === DomainStatus.EXPIRING_SOON) return 1;
        
        // –ü–æ—Ç–æ–º –æ—à–∏–±–∫–∏
        if (aCheck?.status === DomainStatus.ERROR && bCheck?.status !== DomainStatus.ERROR) return -1;
        if (aCheck?.status !== DomainStatus.ERROR && bCheck?.status === DomainStatus.ERROR) return 1;
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –¥–Ω—è–º –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        const aDaysLeft = aCheck?.daysLeft ?? 9999;
        const bDaysLeft = bCheck?.daysLeft ?? 9999;
        return aDaysLeft - bDaysLeft;
      });

      for (const domain of sortedDomains) {
        const lastCheck = domain.domainChecks[0];
        let emoji = 'üåê';
        
        if (lastCheck?.status === DomainStatus.EXPIRED) {
          emoji = 'üî¥';
        } else if (lastCheck?.status === DomainStatus.EXPIRING_SOON) {
          emoji = '‚ö†Ô∏è';
        } else if (lastCheck?.status === DomainStatus.ACTIVE) {
          emoji = 'üü¢';
        } else {
          emoji = 'üü†';
        }

        let domainInfo = `${emoji} <b>${domain.name}</b>\n`;
        domainInfo += `   ${domain.domain}\n`;
        
        if (lastCheck) {
          domainInfo += `   –°—Ç–∞—Ç—É—Å: ${lastCheck.status}\n`;
          
          if (lastCheck.daysLeft !== null) {
            domainInfo += `   –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${lastCheck.daysLeft}\n`;
          }
          
          if (lastCheck.expiresAt) {
            domainInfo += `   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${lastCheck.expiresAt.toLocaleDateString('ru-RU')}\n`;
          }
          
          if (lastCheck.registrar) {
            domainInfo += `   –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${lastCheck.registrar}\n`;
          }
          
          if (lastCheck.nameServers && lastCheck.nameServers.length > 0) {
            domainInfo += `   NS: ${lastCheck.nameServers.slice(0, 2).join(', ')}`;
            if (lastCheck.nameServers.length > 2) {
              domainInfo += ` (+${lastCheck.nameServers.length - 2})`;
            }
            domainInfo += '\n';
          }
          
          if (lastCheck.errorMessage) {
            domainInfo += `   –û—à–∏–±–∫–∞: ${lastCheck.errorMessage}\n`;
          }
        }
        
        domainInfo += '\n';

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        if ((detailMessage + domainInfo).length > MAX_MESSAGE_LENGTH) {
          await this.sendMessage(user.telegramChatId, detailMessage);
          messageCount++;
          detailMessage = `‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ${messageCount}):</b>\n\n`;
        }

        detailMessage += domainInfo;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (detailMessage.length > 0) {
        await this.sendMessage(user.telegramChatId, detailMessage);
      }
    } else if (user.domains.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω—ã, –Ω–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
      const goodNewsMessage = '‚úÖ <b>–í—Å–µ –¥–æ–º–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ!</b>\n\n–í—Å–µ –≤–∞—à–∏ –¥–æ–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã –∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.';
      await this.sendMessage(user.telegramChatId, goodNewsMessage);
    }
  }
}

export const telegramService = new TelegramService();
