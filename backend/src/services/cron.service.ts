import cron from 'node-cron';
import { monitoringService } from './monitoring.service';
import { domainService } from './domain.service';
import { telegramService } from './telegram.service';
import prisma from '../config/database';
import { DomainStatus } from '@prisma/client';

class CronService {
  private monitoringJob: cron.ScheduledTask | null = null;
  private domainCheckJob: cron.ScheduledTask | null = null;

  start(): void {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    // (—Å–µ—Ä–≤–∏—Å —Å–∞–º —Ä–µ—à–∞–µ—Ç –∫–∞–∫–∏–µ —Å–∞–π—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ checkInterval)
    this.monitoringJob = cron.schedule('* * * * *', async () => {
      try {
        await monitoringService.checkAllActiveWebsites();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    // (—Å–µ—Ä–≤–∏—Å —Å–∞–º —Ä–µ—à–∞–µ—Ç –∫–∞–∫–∏–µ –¥–æ–º–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ checkInterval)
    this.domainCheckJob = cron.schedule('0 * * * *', async () => {
      try {
        await this.checkAllActiveDomains();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–æ–≤:', error);
      }
    });

    console.log('‚úì Cron –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã');
    console.log(`  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É`);
    console.log(`  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤: –∫–∞–∂–¥—ã–π —á–∞—Å`);
  }

  stop(): void {
    if (this.monitoringJob) {
      this.monitoringJob.stop();
    }
    if (this.domainCheckJob) {
      this.domainCheckJob.stop();
    }
    console.log('Cron –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  private async checkAllActiveDomains(): Promise<void> {
    console.log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤...');

    const domains = await prisma.domain.findMany({
      where: { isActive: true },
      include: {
        user: true,
        domainChecks: {
          orderBy: { checkedAt: 'desc' },
          take: 1,
        },
      },
    });

    for (const domain of domains) {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—â–µ —Ä–∞–Ω–æ)
        const lastCheck = domain.domainChecks[0];
        if (lastCheck) {
          const minutesSinceLastCheck =
            (Date.now() - lastCheck.checkedAt.getTime()) / (1000 * 60);
          if (minutesSinceLastCheck < domain.checkInterval) {
            continue;
          }
        }

        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞: ${domain.name} (${domain.domain})`);

        const result = await domainService.checkDomain(domain.domain);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await prisma.domainCheck.create({
          data: {
            domainId: domain.id,
            status: result.status,
            expiresAt: result.expiresAt,
            registrar: result.registrar,
            nameServers: result.nameServers,
            daysLeft: result.daysLeft,
            errorMessage: result.errorMessage,
          },
        });

        console.log(
          `‚úì ${domain.name}: ${result.status} (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${result.daysLeft || 'N/A'} –¥–Ω–µ–π)`
        );

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const previousStatus = lastCheck?.status;
        const currentStatus = result.status;

        if (previousStatus && previousStatus !== currentStatus) {
          await this.handleDomainStatusChange(domain, previousStatus, currentStatus, result.daysLeft);
        } else if (
          domain.notifyOnExpiry && 
          result.daysLeft !== null && 
          result.daysLeft <= 30 &&
          domain.user.notificationsEnabled &&
          domain.user.telegramChatId
        ) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
          const shouldNotify = !lastCheck || 
            (Date.now() - lastCheck.checkedAt.getTime()) > 7 * 24 * 60 * 60 * 1000;

          if (shouldNotify) {
            await telegramService.sendDomainAlert(
              domain,
              result.status,
              result.daysLeft,
              result.expiresAt
            );
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–µ–Ω–∞ ${domain.name}:`, error);
      }
    }

    console.log('‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  private async handleDomainStatusChange(
    domain: any,
    _previousStatus: DomainStatus,
    currentStatus: DomainStatus,
    daysLeft: number | null
  ): Promise<void> {
    if (!domain.notifyOnExpiry || !domain.user.notificationsEnabled || !domain.user.telegramChatId) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    const isCritical =
      currentStatus === DomainStatus.EXPIRING_SOON ||
      currentStatus === DomainStatus.EXPIRED;

    if (isCritical) {
      const expiresAt = daysLeft !== null 
        ? new Date(Date.now() + daysLeft * 24 * 60 * 60 * 1000)
        : null;

      await telegramService.sendDomainAlert(
        domain,
        currentStatus,
        daysLeft,
        expiresAt
      );
    }
  }
}

export const cronService = new CronService();
