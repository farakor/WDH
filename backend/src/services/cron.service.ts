import cron from 'node-cron';
import { monitoringService } from './monitoring.service';
import { domainService } from './domain.service';
import { telegramService } from './telegram.service';
import prisma from '../config/database';
import { DomainStatus } from '@prisma/client';

class CronService {
  private monitoringJob: cron.ScheduledTask | null = null;
  private domainCheckJob: cron.ScheduledTask | null = null;
  private dailyWebsiteReportJob: cron.ScheduledTask | null = null;
  private dailyDomainReportJob: cron.ScheduledTask | null = null;

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–º–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
   */
  private async cleanOldDomainChecks(domainId: string): Promise<void> {
    const checks = await prisma.domainCheck.findMany({
      where: { domainId },
      orderBy: { checkedAt: 'desc' },
      select: { id: true },
    });

    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ 50, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
    if (checks.length > 50) {
      const idsToKeep = checks.slice(0, 50).map(c => c.id);
      await prisma.domainCheck.deleteMany({
        where: {
          domainId,
          id: { notIn: idsToKeep },
        },
      });
      console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ ${checks.length - 50} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domainId}`);
    }
  }

  start(): void {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    // (—Å–µ—Ä–≤–∏—Å —Å–∞–º —Ä–µ—à–∞–µ—Ç –∫–∞–∫–∏–µ —Å–∞–π—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ checkInterval)
    this.monitoringJob = cron.schedule('* * * * *', async () => {
      try {
        await monitoringService.checkAllActiveWebsites();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 08:50 MSK (05:50 UTC) –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á–µ—Ç–æ–≤
    this.domainCheckJob = cron.schedule('50 5 * * *', async () => {
      try {
        await this.checkAllActiveDomains();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–æ–≤:', error);
      }
    });

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç–∞–º –≤ 09:00 MSK (06:00 UTC)
    this.dailyWebsiteReportJob = cron.schedule('0 6 * * *', async () => {
      try {
        console.log('üìä –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–∞–π—Ç–∞–º...');
        await this.sendDailyWebsiteReports();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∞–π—Ç–∞–º:', error);
      }
    });

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º –≤ 09:00 MSK (06:00 UTC)
    this.dailyDomainReportJob = cron.schedule('0 6 * * *', async () => {
      try {
        console.log('üåê –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–æ–º–µ–Ω–∞–º...');
        await this.sendDailyDomainReports();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º:', error);
      }
    });

    console.log('‚úì Cron –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã');
    console.log(`  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É`);
    console.log(`  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:50 MSK`);
    console.log(`  - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç–∞–º: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 MSK`);
    console.log(`  - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–æ–º–µ–Ω–∞–º: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 MSK`);
  }

  stop(): void {
    if (this.monitoringJob) {
      this.monitoringJob.stop();
    }
    if (this.domainCheckJob) {
      this.domainCheckJob.stop();
    }
    if (this.dailyWebsiteReportJob) {
      this.dailyWebsiteReportJob.stop();
    }
    if (this.dailyDomainReportJob) {
      this.dailyDomainReportJob.stop();
    }
    console.log('Cron –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  private async checkAllActiveDomains(): Promise<void> {
    console.log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤...');

    const domains = await prisma.domain.findMany({
      where: { isActive: true },
      include: {
        user: true,
        domainChecks: {
          orderBy: { checkedAt: 'desc' },
          take: 1,
        },
      },
    });

    for (const domain of domains) {
      try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—â–µ —Ä–∞–Ω–æ)
        const lastCheck = domain.domainChecks[0];
        if (lastCheck) {
          const minutesSinceLastCheck =
            (Date.now() - lastCheck.checkedAt.getTime()) / (1000 * 60);
          if (minutesSinceLastCheck < domain.checkInterval) {
            continue;
          }
        }

        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞: ${domain.name} (${domain.domain})`);

        const result = await domainService.checkDomain(domain.domain);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await prisma.domainCheck.create({
          data: {
            domainId: domain.id,
            status: result.status,
            expiresAt: result.expiresAt,
            registrar: result.registrar,
            nameServers: result.nameServers,
            daysLeft: result.daysLeft,
            errorMessage: result.errorMessage,
          },
        });

        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
        await this.cleanOldDomainChecks(domain.id);

        console.log(
          `‚úì ${domain.name}: ${result.status} (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${result.daysLeft || 'N/A'} –¥–Ω–µ–π)`
        );

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const previousStatus = lastCheck?.status;
        const currentStatus = result.status;

        if (previousStatus && previousStatus !== currentStatus) {
          await this.handleDomainStatusChange(domain, previousStatus, currentStatus, result.daysLeft);
        } else if (
          domain.notifyOnExpiry && 
          result.daysLeft !== null && 
          result.daysLeft <= 30 &&
          domain.user.notificationsEnabled &&
          domain.user.telegramChatId
        ) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
          const shouldNotify = !lastCheck || 
            (Date.now() - lastCheck.checkedAt.getTime()) > 7 * 24 * 60 * 60 * 1000;

          if (shouldNotify) {
            await telegramService.sendDomainAlert(
              domain,
              result.status,
              result.daysLeft,
              result.expiresAt
            );
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–µ–Ω–∞ ${domain.name}:`, error);
      }
    }

    console.log('‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
  }

  private async handleDomainStatusChange(
    domain: any,
    _previousStatus: DomainStatus,
    currentStatus: DomainStatus,
    daysLeft: number | null
  ): Promise<void> {
    if (!domain.notifyOnExpiry || !domain.user.notificationsEnabled || !domain.user.telegramChatId) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    const isCritical =
      currentStatus === DomainStatus.EXPIRING_SOON ||
      currentStatus === DomainStatus.EXPIRED;

    if (isCritical) {
      const expiresAt = daysLeft !== null 
        ? new Date(Date.now() + daysLeft * 24 * 60 * 60 * 1000)
        : null;

      await telegramService.sendDomainAlert(
        domain,
        currentStatus,
        daysLeft,
        expiresAt
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–∞–π—Ç–∞–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  private async sendDailyWebsiteReports(): Promise<void> {
    const users = await prisma.user.findMany({
      where: {
        telegramChatId: { not: null },
        notificationsEnabled: true,
      },
      include: {
        websites: true,
      },
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–∞–π—Ç–∞–º`);

    let successCount = 0;
    let errorCount = 0;

    for (const user of users) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–∞–π—Ç–æ–≤
      if (user.websites.length === 0) {
        console.log(`‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç —Å–∞–π—Ç–æ–≤)`);
        continue;
      }

      try {
        await telegramService.sendStatusReport(user.id);
        successCount++;
        console.log(`‚úì –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.email}`);
      } catch (error: any) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}:`, error.message);
      }
    }

    console.log(`‚úì –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–æ–º–µ–Ω–∞–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  private async sendDailyDomainReports(): Promise<void> {
    const users = await prisma.user.findMany({
      where: {
        telegramChatId: { not: null },
        notificationsEnabled: true,
      },
      include: {
        domains: true,
      },
    });

    console.log(`üåê –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–æ–º–µ–Ω–∞–º`);

    let successCount = 0;
    let errorCount = 0;

    for (const user of users) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ–º–µ–Ω–æ–≤
      if (user.domains.length === 0) {
        console.log(`‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –¥–æ–º–µ–Ω–æ–≤)`);
        continue;
      }

      try {
        await telegramService.sendDomainReport(user.id);
        successCount++;
        console.log(`‚úì –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.email}`);
      } catch (error: any) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}:`, error.message);
      }
    }

    console.log(`‚úì –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
  }
}

export const cronService = new CronService();
